ggplot() +
geom_point(aes(x = criterionScore, y = corTestStatisticList))
ggplot() +
geom_point(aes(x = corTestStatisticList, y = corList))
View(corTestStatisticList)
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestStatisticList[[i]][["statistic"]]
}
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestStatisticList[[i]][["statistic"]]
}
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestStatisticList[[i]][["statistic"]]
}
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestStatisticList[[i]][["statistic"]]
}
corTestStatisticList <- unlist(corTestStatisticList)
?cor.test
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
View(corTestStatisticList)
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
View(corTestStatisticList)
View(corTestStatisticList)
cor.test
View(corTestStatisticList)
t <- (cor(criterionScore, testScores0to1[1])*sqrt(N-2)*(sqrt(1-cor(criterionScore, testScores0to1[1])^2))
t <- (cor(criterionScore, testScores0to1[1])*sqrt(N-2))*(sqrt(1-cor(criterionScore, testScores0to1[1])^2))
t <- (cor(criterionScore, testScores0to1[,1])*sqrt(N-2))*(sqrt(1-cor(criterionScore, testScores0to1[1])^2))
t <- (cor(criterionScore, testScores0to1[,1])*sqrt(N-2))*(sqrt(1-cor(criterionScore, testScores0to1[,1])^2))
t
cor(criterionScore, testScores0to1[,1])
pnorm(t)
myNull <- 0.8
corTestStatisticList[[1]][["conf.int"]][[2]]
corTestStatisticList[[1]][["conf.int"]][[2]] > myNull
# Cor.test requires the null hyp be correlation = 0. This seems off
corTestList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
corTestStatisticList <- list()
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
}
corTestUpperConfBound <- list()
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
}
corTestUpperConfBound
for (i in 1:M){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
}
corTestUpperConfBound
corTestUpperConfBound <- unlist(corTestUpperConfBound)
corTestUpperConfBound > myNull
ggplot() +
geom_point(x = testScoreMeanSeq, y = corList)
ggplot() +
geom_point(x = testScoreMeanSeq, y = corList)
data <- data.frame(cbind(corList, corTestStatisticList, corTestUpperConfBound, testScoreMeanSeq, corTestUpperConfBound > myNull))
ggplot(data) +
geom_point(x = testScoreMeanSeq, y = corList)
ggplot(data) +
geom_point(x = testScoreMeanSeq, y = corList)
View(data)
ggplot(data) +
geom_point(y = testScoreMeanSeq, x = corList)
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList))
View(data)
corTestStatisticList <- unlist(corTestStatisticList)
corTestUpperConfBound <- unlist(corTestUpperConfBound)
data <- data.frame(cbind(corList, corTestStatisticList, corTestUpperConfBound, testScoreMeanSeq, corTestUpperConfBound > myNull))
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList))
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = corTestUpperConfBound))
data <- data.frame(cbind(corList, corTestStatisticList, corTestUpperConfBound, testScoreMeanSeq, x = (corTestUpperConfBound > myNull))
isSig <- corTestUpperConfBound > myNull
isSig <- data.frame(corTestUpperConfBound > myNull)
testScoreMeanSeq,
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = isSig))
isSig <- data.frame(isSig = corTestUpperConfBound > myNull)
data <- data.frame(cbind(corList,
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = V5))
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = V5))
isSig <- data.frame(as.factor(isSig = corTestUpperConfBound > myNull))
isSig <- data.frame(as.boolean(isSig = corTestUpperConfBound > myNull))
isSig <- data.frame(as.factor(isSig = corTestUpperConfBound > myNull))
isSig <- data.frame(as.logical(isSig = corTestUpperConfBound > myNull))
isSig <- data.frame(as.logical(isSig = corTestUpperConfBound > myNull))
isSig <- data.frame(isSig = as.logical(corTestUpperConfBound > myNull))
data <- data.frame(cbind(corList,
isSig = isSig)
data <- data.frame(cbind(corList,
corTestStatisticList,
corTestUpperConfBound,
testScoreMeanSeq,
isSig = isSig))
data <- data.frame(cbind(corList,
corTestStatisticList,
corTestUpperConfBound,
testScoreMeanSeq,
isSig = isSig))
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = isSig ))
sevList <- 1-pnorm(corTestStatisticList)
sevList
round(sevList, 4)
corTestStatisticList
View(corTestList)
corTestList[[1]][["estimate"]][["cor"]]
for (i in 1:M){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
corTestCorList[[i]] <- corTestList[[i]][["estimate"]][["cor"]]
}
corTestCorList <- list()
for (i in 1:M){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
corTestCorList[[i]] <- corTestList[[i]][["estimate"]][["cor"]]
}
corTestCorList
corTestCorList <- unlist(corTestCorList)
corTestCorList
View(testScores0to1)
for (i in 1:length(testScoreMeanSeq)){
testScores0to1[,i] <- rnorm(criterionScore, mean = testScoreMeanSeq[i], sd = 1)
}
# Correlations between the critereon and the test scores
corList <- as.numeric(cor(criterionScore, testScores0to1))
ggplot() +
geom_point(aes(x = testScoreMeanSeq, y = corList))
# Cor.test requires the null hyp be correlation = 0. This seems off
corTestList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
corTestStatisticList <- list()
corTestUpperConfBound <- list()
corTestCorList <- list()
for (i in 1:M){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
corTestCorList[[i]] <- corTestList[[i]][["estimate"]][["cor"]]
}
corTestCorList <- unlist(corTestCorList)
corTestStatisticList <- unlist(corTestStatisticList)
sevList <- 1-pnorm(corTestStatisticList)
corTestUpperConfBound <- unlist(corTestUpperConfBound)
isSig <- data.frame(isSig = as.logical(corTestUpperConfBound > myNull))
data <- data.frame(cbind(corList,
corTestStatisticList,
corTestUpperConfBound,
testScoreMeanSeq,
sevList,
isSig = isSig))
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = isSig ))
for (i in 1:length(testScoreMeanSeq)){
testScores0to1[,i] <- pnorm(criterionScore, mean = testScoreMeanSeq[i], sd = 1)
}
for (i in 1:length(testScoreMeanSeq)){
testScores0to1[,i] <- pnorm(criterionScore, mean = testScoreMeanSeq[i], sd = 1)
}
# Correlations between the critereon and the test scores
corList <- as.numeric(cor(criterionScore, testScores0to1))
ggplot() +
geom_point(aes(x = testScoreMeanSeq, y = corList))
View(testScores0to1)
# Cor.test requires the null hyp be correlation = 0. This seems off
corTestList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
corTestStatisticList <- list()
corTestUpperConfBound <- list()
corTestCorList <- list()
for (i in 1:M){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
corTestCorList[[i]] <- corTestList[[i]][["estimate"]][["cor"]]
}
corTestCorList <- unlist(corTestCorList)
corTestStatisticList <- unlist(corTestStatisticList)
sevList <- 1-pnorm(corTestStatisticList)
corTestUpperConfBound <- unlist(corTestUpperConfBound)
isSig <- data.frame(isSig = as.logical(corTestUpperConfBound > myNull))
data <- data.frame(cbind(corList,
corTestStatisticList,
corTestUpperConfBound,
testScoreMeanSeq,
sevList,
isSig = isSig))
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = isSig ))
ggplot() +
geom_density(testScores0to1)
ggplot() +
geom_density(aes(testScores0to1))
ggplot() +
geom_density(aes(melt(testScores0to1)))
x <- melt(testScores0to1)
ggplot() +
geom_density(aes(x$value, colour = Var2))
ggplot() +
geom_density(aes(x$value, colour = x$Var2))
View(x)
ggplot() +
geom_point(aes(x$value, y = x$Var1, colour = x$Var2))
ggplot() +
geom_point(aes(x$value, y = x$Var1), colour = x$Var2)
ggplot() +
geom_point(aes(x$value, y = x$Var2), colour = x$Var1)
ggplot() +
geom_point(aes(y$value, x = x$Var2), colour = x$Var1)
ggplot() +
geom_point(aes(y = x$value, x = x$Var2), colour = x$Var1)
ggplot() +
geom_point(aes(x$value, y = x$Var1), colour = x$Var2)
ggplot() +
geom_point(aes(x = x$var2 y = x$Var1), colour = value)
ggplot() +
geom_point(aes(x = x$var2, y = x$Var1), colour = value)
ggplot() +
geom_point(aes(x = x$var2, y = x$Var1), colour = x$value)
ggplot() +
geom_point(aes(x = x$var2, y = x$Var1)
)
ggplot() +
geom_point(aes(x = x$value, y = x$Var1), colour = x$Var2)
ggplot() +
geom_point(aes(x = corTestStatisticList, y = corList))
plot(corTestStatisticList)
ggplot() +
geom_density(aes(corTestStatisticList))
corTestStatisticList
ggplot() +
geom_density(aes(corList))
int_start()
setwd("~/Desktop/Jamovi/psychoPDA/jamoviPPDA")
jmvtools::check()
ls(/Applications/jamovi.app/Contents/Resources/modules)
ls("/Applications/jamovi.app/Contents/Resources/modules")
list.dirs("/Applications/jamovi.app/Contents/Resources/modules")
list.dirs("/Applications/jamovi.app/Contents/Resources/modules", recursive = FALSE)
library(jmvtools)
dir <- jmvtools::check()
dir <- paste0(dir, "/Contents/Resources/modules/base")
dir
dir <- jmvtools::check()
dir
?check()
capture.output(jmvtools::check())
x <- capture.output(jmvtools::check())
x
?check
jmvtools::check(, intern = T)
check
jmcpath
jmcpath()
jmvtools:::jmcpath()
jmvtools:::jmcPath()
jmcPath
jmcPath()
jmvtools:::node
jmvtools:::node()
mycheck <- function (home = NULL)
{
exe <- node()
jmc <- jmcPath()
args <- c(jmc, "--check")
if (is.null(home))
home <- getOption("jamovi_home")
if (is.null(home) && isLinux())
home <- "flatpak"
if (!is.null(home) && isWindows())
home <- paste0("\"", home, "\"")
if (!is.null(home))
args <- c(args, "--home", home)
system2(exe, args, wait = TRUE, intern = T)
}
mycheck <- function (home = NULL)
{
exe <- node()
jmc <- jmvtools:::jmcPath()
args <- c(jmc, "--check")
if (is.null(home))
home <- getOption("jamovi_home")
if (is.null(home) && isLinux())
home <- "flatpak"
if (!is.null(home) && isWindows())
home <- paste0("\"", home, "\"")
if (!is.null(home))
args <- c(args, "--home", home)
system2(exe, args, wait = TRUE, intern = T)
}
mycheck()
jmvcore:::node
jmvcore:::node()
jmvtools:::jmcPath()
jmc <- jmvtools:::jmcPath()
args <- c(args, "--home", home)
args <- c(args, "--home", home = NULL)
system2(jmc, args, wait = T)
args <- c(jmc, "--check")
args <- c(args, "--home", home = NULL)
system2(jmc, args, wait = T)
system2(node(), jmc, args, wait = T)
install.packages("node")
install.packages("node")
exe <- node::node()
system2(exe, args, wait = TRUE, intern = T)
?system
?system2
system2(exe, args, wait = TRUE, stderr = T)
x <- system2(exe, args, wait = TRUE, stderr = T)
x
exe <- node::node()
x <- system2(exe, args, wait = TRUE, stderr = T)
jmc <- jmvtools:::jmcPath()
args <- c(args, "--home", home = NULL)
system2(exe, args, wait = TRUE, stderr = T)
system2(exe, args, wait = TRUE)
check
jmvtools::check()
exe <- node::node()
jmc <- jmvtools:::jmcPath()
args <- c(jmc, "--check")
if (is.null(home))
home <- getOption("jamovi_home")
if (is.null(home) && isLinux())
args <- c(args, "--home", home = NULL)
system2(exe, args, wait = TRUE, st = )
args <- c(args, "--home", home = NULL)
system2(exe, args, wait = TRUE, st = )
system2(exe, args, wait = TRUE, stderr = T)
check()
check
system2(exe, args, wait = TRUE, stdout = T)
mycheck <- function (home = NULL)
{
exe <- node::node()
jmc <- jmvtools:::jmcPath()
args <- c(jmc, "--check")
if (is.null(home))
home <- getOption("jamovi_home")
if (is.null(home) && isLinux())
home <- "flatpak"
if (!is.null(home) && isWindows())
home <- paste0("\"", home, "\"")
if (!is.null(home))
args <- c(args, "--home", home)
system2(exe, args, wait = TRUE, stdout = T)
}
mycheck()
mycheck <- function (home = NULL)
{
exe <- node::node()
jmc <- jmvtools:::jmcPath()
args <- c(jmc, "--check")
if (is.null(home))
home <- getOption("jamovi_home")
if (is.null(home) && jmvtools:::isLinux())
home <- "flatpak"
if (!is.null(home) && jmvtools:::isWindows())
home <- paste0("\"", home, "\"")
if (!is.null(home))
args <- c(args, "--home", home)
system2(exe, args, wait = TRUE, stdout = T)
}
system2(exe, args, wait = TRUE, stdout = T)
check()
trace(jmvtools::check)
?trace
dir <- jmvtools::check()
trace(jmvtools::check, edit = T)
dir <- jmvtools::check()
dir
dir <- jmvtools::check()[2]
dir
dir <- jmvtools::check()
dir <- jmvtools::check()[4]
?gsub
dir <- gsub("jamovi found at ", "", jmvtools::check()[4])
dir
dir <- paste0(dir, "/Contents/Resources/modules/base")
dir
files <- list.files(paste0(dir, "/Contents/Resources/modules/base"))
list.files(paste0(dir, "/Contents/Resources/modules/base"))
dir <- paste0(dir, "/Contents/Resources/modules/base")
list.files(dir)
dir
dir <- paste0(dir, "/Contents/Resources/modules/base/")
list.files(dir)
dir <- paste0(dir, "/Contents/Resources/modules/base/R/")
list.files(dir)
dir <- paste0(dir, "/Contents/Resources/modules/base/R")
list.files(dir)
list.dirs(dir)
dir <- paste0(dir, "/Contents/Resources/modules/base/R/")
list.dirs(dir)
dir <- gsub("jamovi found at ", "", jmvtools::check()[4])
/Applications/jamovi.app/Contents/Resources/modules/base/R
dir <- paste0(dir, "/Contents/Resources/modules/base/R")
list.dirs(dir)
list.dirs(dir, recursive = FALSE)
?install
jmvtools::install("https://github.com/lucasjfriesen/jamoviPsychoPDA/tree/master")
?download.packages
list <- c(BH,
Rcpp,
assertthat,
cutpointr,
dplyr,
foreach,
glue,
iterators,
plogr,
psychoPDA,
purrr,
tibble,
tidyr,
tidyselect)
list <- c("BH",
"Rcpp",
"assertthat",
"cutpointr",
"dplyr",
"foreach",
"glue",
"iterators",
"plogr",
"purrr",
"tibble",
"tidyr",
"tidyselect")
?download.file
dir
download.packages(pkgs = list, destdir = "/Users/lucasfriesen/Downloads/")
download.packages(pkgs = list, destdir = "/Desktop/")
download.packages(pkgs = list)
download.packages(pkgs = list, destdir = dir)
download.file(url = "https://github.com/lucasjfriesen/jamoviPsychoPDA/tree/master")
download.file(url = "https://github.com/lucasjfriesen/jamoviPsychoPDA/tree/master", destfile = getwd())
x <- url("https://github.com/lucasjfriesen/jamoviPsychoPDA/tree/master")
x
readlines(x)
readLines(x)
fils <- sprintf("%s%s", x, sub("^.*srtm", "srtm", pg))
pg <- readLines(x)
fils <- sprintf("%s%s", x, sub("^.*srtm", "srtm", pg))
fils
getwd
getwd()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
??cutpointr
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
setwd("~/Desktop/Jamovi/TestROC")
jmvtools::install()
jmvtools::install()
setwd("~/Desktop/Jamovi/psychoPDA/jamoviPPDA")
jmvtools::install()
jmvtools::install()
setwd("~/Desktop/Jamovi/TestROC")
jmvtools::install()
?cbind_all
??cbind_all
setwd("~/Desktop/Jamovi/psychoPDA/jamoviPPDA")
jmvtools::install()
setwd("~/Desktop/Jamovi/TestROC")
jmvtools::install()
jmvtools::install()
getwd()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
setwd("~/Desktop/Jamovi/psychoPDA/jamoviPPDA")
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
