ic, sep = "")
rownames(difPur) <- ro
colnames(difPur) <- co
}
RES <- list(Logistik = stats1, p.value = PVAL, logitPar = logitPar,
logitSe = logitSe, parM0 = prov1$parM0, seM0 = prov1$seM0,
cov.M0 = prov1$cov.M0, cov.M1 = prov1$cov.M1,
deltaR2 = deltaR2, alpha = alpha, thr = Q, DIFitems = DIFitems,
member.type = member.type, match = prov1$match,
type = type, p.adjust.method = p.adjust.method,
adjusted.p = NULL, purification = purify, nrPur = nrPur,
difPur = difPur, convergence = noLoop, names = colnames(DATA),
anchor.names = NULL, criterion = criterion, save.output = save.output,
output = output)
}
if (!is.null(p.adjust.method)) {
df <- switch(RES$type, both = 2, udif = 1, nudif = 1)
pval <- 1 - pchisq(RES$Logistik, df)
RES$adjusted.p <- p.adjust(pval, method = p.adjust.method)
if (min(RES$adjusted.p, na.rm = TRUE) > alpha)
RES$DIFitems <- "No DIF item detected"
else RES$DIFitems <- which(RES$adjusted.p < alpha)
}
class(RES) <- "Logistic"
return(RES)
}
resToReturn <- internalLog()
install.packages('jmvtools', repos=c('https://repo.jamovi.org', 'https://cran.r-project.org'))
remove.packages("jmvtools")
install.packages('jmvtools', repos=c('https://repo.jamovi.org', 'https://cran.r-project.org'))
jmvtools::check()
remove.packages("jmvcore")
install.packages("jmvcore")
install.packages("jmvcore")
setwd("~/Desktop/Jamovi/DIF/jamoviDIF")
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
sensRange <- seq(-1,1, length.out = 50)
hypTrueEffSens <- hypTrueEff * observedSE(sensRange)
hypTrueEff <- 2.5
observedSE <- 1
hypTrueEffSens <- hypTrueEff * observedSE(sensRange)
observedSE <- 1
hypTrueEffSens <- hypTrueEff * observedSE(sensRange)
hypTrueEffSens <- hypTrueEff + (observedSE*sensRange)
dfSens <- df + df*seq(.5, 1.5, length.out = 50)
df <- 100
dfSens <- df + df*seq(.5, 1.5, length.out = 50)
dfSens <- df + df*seq(-.5, .5, length.out = 50)
dfSens <- round(df + df*seq(-.5, .5, length.out = 50))
dfSensdfSens
dfSens
sensRes <- matrix(ncol = 3, nrow = length(sensRange))
alpha <- 0.05
retroDesign <- function(D,
observedSE,
alpha,
df,
nSims) {
z <- qt(1-alpha/2, df)
p.hi <- 1 - pt(z-D/observedSE, df)
p.lo <- pt(-z-D/observedSE, df)
power <- p.hi + p.lo
typeS <- p.lo/power
estimate <- D + observedSE*rt(nSims,df)
significant <- abs(estimate) > observedSE*z
typeM <- mean(abs(estimate)[significant])/D
return(list(power=power, typeS=typeS, typeM=typeM))
}
for (i in 1:length(observedSE)){
for (j in 1:sensRange){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
sensRes[i+(j-1),] <- res
}
}
nSims <- 100
for (i in 1:length(observedSE)){
for (j in 1:sensRange){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
sensRes[i+(j-1),] <- res
}
}
for (i in 1:length(observedSE)){
for (j in 1:sensRange){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
sensRes[i+(j-1),] <- res
}
}
for (i in 1:length(observedSE)){
for (j in 1:langth(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
sensRes[i+(j-1),] <- res
}
}
for (i in 1:length(observedSE)){
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
sensRes[i+(j-1),] <- res
}
}
index <- i+(j-1)
for (i in 1:length(observedSE)){
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
index <- i+(j-1)
sensRes[index,] <- res
}
}
View(sensRes)
sensRes <- matrix(ncol = 4, nrow = nrow(data)*length(sensRange))
sensRes <- matrix(ncol = 4, nrow = (nrow(data)*length(sensRange)))
nRows <- nrow(data)*length(sensRange)
length(sensRange)
data <- matrix(ncol = 1, nrow = 1)
sensRes <- matrix(ncol = 4, nrow = (nrow(data)*length(sensRange)))
for (i in 1:length(observedSE)){
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
index <- i+(j-1)
sensRes[index,] <- res
}
}
sensRes <- matrix(ncol = 3, nrow = (nrow(data)*length(sensRange)))
for (i in 1:length(observedSE)){
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
index <- i+(j-1)
sensRes[index,] <- res
}
}
for (i in 1:length(observedSE)){
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
index <- i+(j-1)
sensRes[index,] <- res
}
}
sensRes <- matrix(ncol = 3, nrow = 50))
sensRes <- matrix(ncol = 3, nrow = 50)
for (i in 1:length(observedSE)){
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
index <- i+(j-1)
sensRes[index,] <- res
}
}
sensRes <- matrix(ncol = 3, nrow = 50)
for (i in 1:length(observedSE)){
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
index <- i+(j-1)
sensRes[index,1:3] <- res
}
}
View(sensRes)
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
sensRes[j,1:3] <- res
}
sensRes <- matrix(ncol = 3, nrow = 50)
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
sensRes[j,1:3] <- res
}
sensRes <- matrix(ncol = 3, nrow = 50)
View(sensRes)
unlist(res)
sensRes[j,1:3] <- unlist(res)
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
sensRes[j,1:3] <- unlist(res)
}
View(sensRes)
library(ggplot2)
x <- cbind(sensRange, sensRes)
View(x)
View(x)
ggplot(x) +
geom_line(aes(x=sensRange, y = V1))
x <- data.frame(cbind(sensRange, sensRes))
ggplot(x) +
geom_line(aes(x=sensRange, y = V1))
ggplot(x) +
geom_line(aes(x=sensRange, y = V2))
names(sensRes) <- c("typeS", "typeM", "power")
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
sensRes[j,1:3] <- unlist(res)
}
x <- data.frame(cbind(sensRange, sensRes))
colnames(x) <- c("sensRange", "typeS", "typeM", "power")
ggplot(x) +
geom_line(aes(x=sensRange, y = V1)) +
geom_line(aes(x=sensRange, y = V2)) +
geom_line(aes(x=sensRange, y = V3))
ggplot(x) +
geom_line(aes(x=sensRange, y = typeS)) +
geom_line(aes(x=sensRange, y = typeM)) +
geom_line(aes(x=sensRange, y = power))
nSims <- 5000
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
sensRes[j,1:3] <- unlist(res)
}
x <- data.frame(cbind(sensRange, sensRes))
colnames(x) <- c("sensRange", "typeS", "typeM", "power")
ggplot(x) +
geom_line(aes(x=sensRange, y = typeS, colour = "typeS")) +
geom_line(aes(x=sensRange, y = typeM, colour = "typeM")) +
geom_line(aes(x=sensRange, y = power, colour = "power"))
View(x)
df <- 20
for (i in 1:nrow(results)){
resultsRow <- retroDesign(abs(hypTrueEff[i]),
observedSE[i],
alpha,
df[i],
nSims)
results[i, 1] <- hypTrueEff[i]
results[i, 2] <- resultsRow$typeS
results[i, 3] <- resultsRow$typeM
results[i, 4] <- resultsRow$power
}
sensRange <- seq(-1,1, length.out = 50)
hypTrueEffSens <- hypTrueEff + (observedSE * sensRange)
sensRes <- matrix(ncol = 3, nrow = 50)
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
sensRes[j,1:3] <- unlist(res)
}
x <- data.frame(cbind(sensRange, sensRes))
colnames(x) <- c("sensRange", "typeS", "typeM", "power")
ggplot(x) +
geom_line(aes(x=sensRange, y = typeS, colour = "typeS")) +
geom_line(aes(x=sensRange, y = typeM, colour = "typeM")) +
geom_line(aes(x=sensRange, y = power, colour = "power"))
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
sensRes[j,1:3] <- unlist(res)
}
sensRes <- matrix(ncol = 3, nrow = 50)
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE[i],
alpha,
df[i],
nSims)
sensRes[j,1:3] <- unlist(res)
}
View(sensRes)
results <- matrix(ncol = 4, nrow = nrow(data))
resultsRow <- retroDesign(abs(hypTrueEff[i]),
observedSE[i],
alpha,
df[i],
nSims)
View(resultsRow)
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE,
alpha,
df,
nSims)
sensRes[j,1:3] <- unlist(res)
}
x <- data.frame(cbind(sensRange, sensRes))
colnames(x) <- c("sensRange", "typeS", "typeM", "power")
sensRes <- matrix(ncol = 4, nrow = 50)
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE,
alpha,
df,
nSims)
sensRes[j,1:4] <- unlist(res)
}
sensRes <- matrix(ncol = 3, nrow = 50)
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE,
alpha,
df,
nSims)
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE,
alpha,
df,
nSims)
sensRes[j,1:4] <- unlist(res)
}
x <- data.frame(cbind(sensRange, sensRes))
colnames(x) <- c("sensRange", "power", "typeS", "typeM")
ggplot(x) +
geom_line(aes(x=sensRange, y = typeS, colour = "typeS")) +
geom_line(aes(x=sensRange, y = typeM, colour = "typeM")) +
geom_line(aes(x=sensRange, y = power, colour = "power"))
sensRange <- seq(-1,1, length.out = 50)
hypTrueEffSens <- hypTrueEff + (observedSE * sensRange)
sensRes <- matrix(ncol = 3, nrow = 50)
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE,
alpha,
df,
nSims)
sensRes[j,1:4] <- unlist(res)
}
sensRange <- seq(-1,1, length.out = 50)
hypTrueEffSens <- hypTrueEff + (observedSE * sensRange)
sensRes <- matrix(ncol = 3, nrow = 50)
for (j in 1:length(sensRange)){
res <- retroDesign(abs(hypTrueEffSens[j]),
observedSE,
alpha,
df,
nSims)
sensRes[j,1:3] <- unlist(res)
}
x <- data.frame(cbind(sensRange, sensRes))
colnames(x) <- c("sensRange", "power", "typeS", "typeM")
ggplot(x) +
geom_line(aes(x=sensRange, y = typeS, colour = "typeS")) +
geom_line(aes(x=sensRange, y = typeM, colour = "typeM")) +
geom_line(aes(x=sensRange, y = power, colour = "power"))
ggplot(x) +
geom_line(aes(x=sensRange, y = typeS, colour = "typeS")) +
geom_line(aes(x=sensRange, y = typeM, colour = "typeM")) +
geom_line(aes(x=sensRange, y = power, colour = "power")) +
theme_classic()
colnames(x) <- c("Hyp. True Eff.", "power", "typeS", "typeM")
ggplot(x) +
geom_line(aes(x=`Hyp. True Eff.`, y = typeS, colour = "typeS")) +
geom_line(aes(x=`Hyp. True Eff.`, y = typeM, colour = "typeM")) +
geom_line(aes(x=`Hyp. True Eff.`, y = power, colour = "power")) +
theme_classic()
ggplot(x) +
geom_line(aes(x=Hyp. True Eff., y = typeS, colour = "typeS")) +
geom_line(aes(x=Hyp. True Eff., y = typeM, colour = "typeM")) +
geom_line(aes(x=Hyp. True Eff., y = power, colour = "power")) +
theme_classic()
ggplot(x) +
geom_line(aes(x=Hyp. True Eff., y = typeS, colour = "typeS")) +
geom_line(aes(x=Hyp. True Eff., y = typeM, colour = "typeM")) +
geom_line(aes(x=Hyp. True Eff., y = power, colour = "power")) +
theme_classic()
colnames(x) <- c("Hyp. True Eff.", "power", "typeS", "typeM")
ggplot(x) +
geom_line(aes(x=Hyp. True Eff., y = typeS, colour = "typeS")) +
geom_line(aes(x=Hyp. True Eff., y = typeM, colour = "typeM")) +
geom_line(aes(x=Hyp. True Eff., y = power, colour = "power")) +
theme_classic()
ggplot(x) +
geom_line(aes(x=`Hyp. True Eff.`, y = typeS, colour = "typeS")) +
geom_line(aes(x=`Hyp. True Eff.`, y = typeM, colour = "typeM")) +
geom_line(aes(x=`Hyp. True Eff.`, y = power, colour = "power")) +
theme_classic()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
?facet_wrap
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
?facet_wrap
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
