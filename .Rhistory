y[1]
y <- approxfun(test(x))
plot(y)
y
test
plot(test)
x <- rnorm(n = 10000)
test <- ecdf(x)
plot(test)
quantile(.5)
qemp(test, .5)
qEmp <- function(empFn, x){
quantile(empFn, x)
}
qemp(test, .5)
qmp(test, .5)
qEmp(test, .5)
plot(density(x))
density(x, 0.5)
dens <- density(x)
dens$y[dens$x == 0]
View(dens)
dens[["x"]]
dens$y[dens$x == 0.016081467]
quantile(dens$y, .5)
dnorm(.5)
dnorm(0)
quantile(dens$y, 0)
quantile(dens$y, .95)
length(dens$y)
dens$y[512/2]
dEmp <- function(values, x){
dens <- density(values)
i <- length(dens$y)*x
dens_x <-dens$y[i]
dens_x
}
dEmp(values = x, x = 0.5)
qnorm(pnorm(0.5))
dnorm(0.5)
dnorm(00)
dEmp(x, qEmp(0))
qEmp(0)
Q
qEmp(0)
Q
Q
qEmp(test, 0)
qEmp(test, 0.5)
dNorm(0)
dnorm(0)
dEmp(test, 0, x)
dEmp(test, x = 0, values = x)
dEmp(empFn = test, x = 0, values = x)
dEmp <- function(empFn, x, values){
qEmp <- function(empFn, x){
quantile(empFn, x)
}
dens <- density(values)
x <- qEmp(empFn, x)
i <- length(dens$y)*x
dens_x <-dens$y[i]
dens_x
}
dEmp(empFn = test, x = 0, values = x)
dEmp(test, qEmp, 0, x)
dEmp <- function(empFn, qEmp, dPoint, values){
dens <- density(values)
x <- qEmp(empFn, dPoint)
i <- length(dens$y)*x
dens_x <- dens$y[i]
dens_x
}
dEmp(test, qEmp, 0, x)
qEmp(test, 0)
qEmp(test, 0.5)
dEmp(test, qEmp, 0.5, x)
values <- x
dPoint <- 0.5
dens <- density(values)
x <- qEmp(empFn, dPoint)
x
i <- round(length(dens$y)*x)
i
dens_x <- dens$y[i]
dens_x
dEmp <- function(empFn, qEmp, dPoint, values){
dens <- density(values)
x <- qEmp(empFn, dPoint)
i <- round(length(dens$y)*x)
dens_x <- dens$y[i]
dens_x
}
dEmp(test, qEmp, 0.5, x)
dEmp(test, qEmp, 0.5, values)
dEmp(test, qEmp, 0.7, values)
dEmp(test, qEmp, 0.51, values)
dEmp(test, qEmp, 0.5, values)
plot(test())
plot(test
)
p <- plot(test)
plot(test)
summary(test)
dnorm(0)
test(0)
plot(density(x))
plot(density(values))
quantile(values, values[values == 0])
values[values == 0]
values == 0
values == which(min(abs(values - 0))
)
min(abs(values - 0))
which.min(abs(values - 0)))
which.min(abs(values - 0))
values[which.min(abs(values - 0))]
dEmp <- function(empFn, qEmp, dPoint, values){
dens <- density(values)
i <- quantile(dens$x, values[which.min(abs(values - dpoint))])
dens_x <- dens$y[i]
dens_x
}
dEmp(test, qEmp, 0, values)
dEmp <- function(empFn, qEmp, dPoint, values){
dens <- density(values)
i <- quantile(dens$x, values[which.min(abs(values - dPoint))])
dens_x <- dens$y[i]
dens_x
}
dEmp(test, qEmp, 0, values)
dens <- density(values)
i <- quantile(dens$x, values[which.min(abs(values - dPoint))])
i
dPoint
dens_x <- dens$y[i]
dens_x
dens$y[i]
i
i <- values[which.min(abs(values - dPoint))]
dens_x <- dens$y[dens$x == i]
dens_x
dens$x == i
i <- values[which.min(abs(values - dPoint))]
i
values
dnorm(0.5)
i <- values[which.min(abs(values - dPoint))]
i
i <- quantile(values, values[which.min(abs(values - dPoint))])
i
dens$x == i
dens$y == i
i
i %in% dens$x
i %in% dens$y
i %in% values
i <- values[which.min(abs(values - dPoint))]
i %in% dens$x
i %in% dens$y
i %in% values
i <- quantile(values, values[which.min(abs(values - dPoint))])
i
i %in% values
i %in% dens$y
i %in% dens$x
i <- quantile(dens$x, dens$x[which.min(abs(dens$x - dPoint))])
dens_x <- dens$y[dens$x == i]
dens_x
i
i %in% dens$x
i %in% dens$y
i <- dens$x[which.min(abs(dens$x - dPoint))]
dens_x <- dens$y[dens$x == i]
dens_x
dnorm(0.5)
dEmp <- function(empFn, qEmp, dPoint, values){
dens <- density(values)
i <- dens$x[which.min(abs(dens$x - dPoint))]
dens_x <- dens$y[dens$x == i]
dens_x
}
dEmp(empFn, qEmp, 0, values)
dnorm(0)
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
n = 141
seq(10, 141)
seq(10, 141*2)
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
nSims = 5000
resultsHTEViz <- data.frame("estimate" = rep(as.numeric(), times = length(data)*nSims),
"z" = rep(as.numeric(), times = length(data)*nSims),
"observedSE" = rep(as.numeric(), times = length(data)*nSims))
resultsHTEViz <- data.frame("estimate" = rep(as.numeric(), times = nrow(data)*nSims),
"z" = rep(as.numeric(), times = nrow(data)*nSims),
"observedSE" = rep(as.numeric(), times = nrow(data)*nSims))
nrow(data)
nrow(data)*nSims
resultsHTEViz <- data.frame("estimate" = as.numeric(),
"z" = as.numeric(),
"observedSE" = as.numeric())
resultsHTEViz <- data.frame(rep("estimate" = as.numeric(),
"z" = as.numeric(),
"observedSE" = as.numeric(), times = nSims)
for (i in 1:nrow(data)) {
resultsHTEViz[nSims*(i-1):nSims*i,] <- retroDesignEmp(abs(hypTrueEff[i]),
observedSE[i],
alpha,
df[i],
nSims)
}
self$results$debug$setContent(resultsHTEViz)
imageHTEViz <- self$results$plotHTEViz
imageHTEViz$setState(resultsHTEViz)
}
resultsHTEViz <- data.frame(rep("estimate" = as.numeric(),
"z" = as.numeric(),
"observedSE" = as.numeric(), times = nSims))
resultsHTEViz <- data.frame("estimate" = as.numeric(),
"z" = as.numeric(),
"observedSE" = as.numeric())
retroDesignEmp <- function(D,
observedSE,
alpha,
df,
nSims) {
z <- qt(1 - alpha / 2, df)
estimate <- D + observedSE * rt(nSims, df)
return(list(estimate, rep(z, times = nSims), rep(observedSE, times = nSims)))
}
i <- 1
retroDesignEmp(abs(hypTrueEff[i]),
observedSE[i],
alpha,
df[i],
nSims)
resultsHTEViz[nSims*(i-1):nSims*i,] <- retroDesignEmp(abs(hypTrueEff[i]),
observedSE[i],
alpha,
df[i],
nSims)
resultsHTEViz <- retroDesignEmp(abs(hypTrueEff[i]),
observedSE[i],
alpha,
df[i],
nSims)
